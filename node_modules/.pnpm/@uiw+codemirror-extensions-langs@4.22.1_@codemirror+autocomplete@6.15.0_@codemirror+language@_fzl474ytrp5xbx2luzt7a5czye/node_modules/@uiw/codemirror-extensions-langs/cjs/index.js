"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.langs = exports.langNames = void 0;
exports.loadLanguage = loadLanguage;
var _languageData = require("@codemirror/language-data");
var _language = require("@codemirror/language");
var _langMarkdown = require("@codemirror/lang-markdown");
var _langJavascript = require("@codemirror/lang-javascript");
var _langHtml = require("@codemirror/lang-html");
var _langCss = require("@codemirror/lang-css");
var _langLess = require("@codemirror/lang-less");
var _langSass = require("@codemirror/lang-sass");
var _langJson = require("@codemirror/lang-json");
var _codemirrorLangMermaid = require("codemirror-lang-mermaid");
var _langPython = require("@codemirror/lang-python");
var _langXml = require("@codemirror/lang-xml");
var _langSql = require("@codemirror/lang-sql");
var _langJava = require("@codemirror/lang-java");
var _langRust = require("@codemirror/lang-rust");
var _langCpp = require("@codemirror/lang-cpp");
var _langLezer = require("@codemirror/lang-lezer");
var _langPhp = require("@codemirror/lang-php");
var _langLiquid = require("@codemirror/lang-liquid");
var _langWast = require("@codemirror/lang-wast");
var _langVue = require("@codemirror/lang-vue");
var _langAngular = require("@codemirror/lang-angular");
var _codemirrorLangNix = require("@replit/codemirror-lang-nix");
var _codemirrorLangSvelte = require("@replit/codemirror-lang-svelte");
var _codemirrorLangCsharp = require("@replit/codemirror-lang-csharp");
var _codemirrorLangSolidity = require("@replit/codemirror-lang-solidity");
var _apl2 = require("@codemirror/legacy-modes/mode/apl");
var _asciiarmor = require("@codemirror/legacy-modes/mode/asciiarmor");
var _asterisk2 = require("@codemirror/legacy-modes/mode/asterisk");
var _brainfuck2 = require("@codemirror/legacy-modes/mode/brainfuck");
var _clike = require("@codemirror/legacy-modes/mode/clike");
var _langClojure = require("@nextjournal/lang-clojure");
var _cmake2 = require("@codemirror/legacy-modes/mode/cmake");
var _cobol2 = require("@codemirror/legacy-modes/mode/cobol");
var _coffeescript = require("@codemirror/legacy-modes/mode/coffeescript");
var _commonlisp = require("@codemirror/legacy-modes/mode/commonlisp");
var _crystal2 = require("@codemirror/legacy-modes/mode/crystal");
var _cypher2 = require("@codemirror/legacy-modes/mode/cypher");
var _d2 = require("@codemirror/legacy-modes/mode/d");
var _diff2 = require("@codemirror/legacy-modes/mode/diff");
var _dockerfile = require("@codemirror/legacy-modes/mode/dockerfile");
var _dtd2 = require("@codemirror/legacy-modes/mode/dtd");
var _dylan2 = require("@codemirror/legacy-modes/mode/dylan");
var _ebnf2 = require("@codemirror/legacy-modes/mode/ebnf");
var _ecl2 = require("@codemirror/legacy-modes/mode/ecl");
var _eiffel2 = require("@codemirror/legacy-modes/mode/eiffel");
var _elm2 = require("@codemirror/legacy-modes/mode/elm");
var _erlang2 = require("@codemirror/legacy-modes/mode/erlang");
var _factor2 = require("@codemirror/legacy-modes/mode/factor");
var _fcl2 = require("@codemirror/legacy-modes/mode/fcl");
var _forth2 = require("@codemirror/legacy-modes/mode/forth");
var _fortran2 = require("@codemirror/legacy-modes/mode/fortran");
var _gas2 = require("@codemirror/legacy-modes/mode/gas");
var _gherkin2 = require("@codemirror/legacy-modes/mode/gherkin");
var _go2 = require("@codemirror/legacy-modes/mode/go");
var _groovy2 = require("@codemirror/legacy-modes/mode/groovy");
var _haskell2 = require("@codemirror/legacy-modes/mode/haskell");
var _haxe2 = require("@codemirror/legacy-modes/mode/haxe");
var _http2 = require("@codemirror/legacy-modes/mode/http");
var _idl2 = require("@codemirror/legacy-modes/mode/idl");
var _jinja2 = require("@codemirror/legacy-modes/mode/jinja2");
var _julia2 = require("@codemirror/legacy-modes/mode/julia");
var _livescript = require("@codemirror/legacy-modes/mode/livescript");
var _lua2 = require("@codemirror/legacy-modes/mode/lua");
var _mathematica2 = require("@codemirror/legacy-modes/mode/mathematica");
var _mbox2 = require("@codemirror/legacy-modes/mode/mbox");
var _mirc2 = require("@codemirror/legacy-modes/mode/mirc");
var _modelica2 = require("@codemirror/legacy-modes/mode/modelica");
var _mscgen2 = require("@codemirror/legacy-modes/mode/mscgen");
var _mumps2 = require("@codemirror/legacy-modes/mode/mumps");
var _nginx2 = require("@codemirror/legacy-modes/mode/nginx");
var _nsis2 = require("@codemirror/legacy-modes/mode/nsis");
var _ntriples2 = require("@codemirror/legacy-modes/mode/ntriples");
var _octave2 = require("@codemirror/legacy-modes/mode/octave");
var _oz2 = require("@codemirror/legacy-modes/mode/oz");
var _pascal2 = require("@codemirror/legacy-modes/mode/pascal");
var _perl2 = require("@codemirror/legacy-modes/mode/perl");
var _pig2 = require("@codemirror/legacy-modes/mode/pig");
var _powershell = require("@codemirror/legacy-modes/mode/powershell");
var _properties2 = require("@codemirror/legacy-modes/mode/properties");
var _protobuf2 = require("@codemirror/legacy-modes/mode/protobuf");
var _puppet2 = require("@codemirror/legacy-modes/mode/puppet");
var _q2 = require("@codemirror/legacy-modes/mode/q");
var _r2 = require("@codemirror/legacy-modes/mode/r");
var _ruby2 = require("@codemirror/legacy-modes/mode/ruby");
var _sas2 = require("@codemirror/legacy-modes/mode/sas");
var _scheme2 = require("@codemirror/legacy-modes/mode/scheme");
var _shell2 = require("@codemirror/legacy-modes/mode/shell");
var _sieve2 = require("@codemirror/legacy-modes/mode/sieve");
var _smalltalk2 = require("@codemirror/legacy-modes/mode/smalltalk");
var _solr2 = require("@codemirror/legacy-modes/mode/solr");
var _sparql2 = require("@codemirror/legacy-modes/mode/sparql");
var _spreadsheet2 = require("@codemirror/legacy-modes/mode/spreadsheet");
var _stex2 = require("@codemirror/legacy-modes/mode/stex");
var _stylus2 = require("@codemirror/legacy-modes/mode/stylus");
var _swift2 = require("@codemirror/legacy-modes/mode/swift");
var _tcl2 = require("@codemirror/legacy-modes/mode/tcl");
var _textile2 = require("@codemirror/legacy-modes/mode/textile");
var _tiddlywiki = require("@codemirror/legacy-modes/mode/tiddlywiki");
var _tiki2 = require("@codemirror/legacy-modes/mode/tiki");
var _toml2 = require("@codemirror/legacy-modes/mode/toml");
var _troff2 = require("@codemirror/legacy-modes/mode/troff");
var _ttcn2 = require("@codemirror/legacy-modes/mode/ttcn");
var _turtle2 = require("@codemirror/legacy-modes/mode/turtle");
var _vb2 = require("@codemirror/legacy-modes/mode/vb");
var _vbscript = require("@codemirror/legacy-modes/mode/vbscript");
var _velocity2 = require("@codemirror/legacy-modes/mode/velocity");
var _verilog2 = require("@codemirror/legacy-modes/mode/verilog");
var _vhdl2 = require("@codemirror/legacy-modes/mode/vhdl");
var _webidl = require("@codemirror/legacy-modes/mode/webidl");
var _xquery = require("@codemirror/legacy-modes/mode/xquery");
var _yacas2 = require("@codemirror/legacy-modes/mode/yacas");
var _yaml2 = require("@codemirror/legacy-modes/mode/yaml");
var _z2 = require("@codemirror/legacy-modes/mode/z80");
// import { asn1 } from '@codemirror/legacy-modes/mode/asn1';

// import { mllike } from '@codemirror/legacy-modes/mode/mllike';

// import { rpm } from '@codemirror/legacy-modes/mode/rpm';

// import { mode } from '@codemirror/legacy-modes/mode/simple-mode';

// import { cfg } from '@codemirror/legacy-modes/mode/ttcn-cfg';

var langs = exports.langs = {
  apl: function apl() {
    return _language.StreamLanguage.define(_apl2.apl);
  },
  asciiArmor: function asciiArmor() {
    return _language.StreamLanguage.define(_asciiarmor.asciiArmor);
  },
  // asn1: () => StreamLanguage.define(asn1),
  asterisk: function asterisk() {
    return _language.StreamLanguage.define(_asterisk2.asterisk);
  },
  // clike: () => StreamLanguage.define(clike),
  c: function c() {
    return _language.StreamLanguage.define(_clike.c);
  },
  csharp: function csharp() {
    return (0, _codemirrorLangCsharp.csharp)();
  },
  scala: function scala() {
    return _language.StreamLanguage.define(_clike.scala);
  },
  solidity: function solidity() {
    return _codemirrorLangSolidity.solidity;
  },
  kotlin: function kotlin() {
    return _language.StreamLanguage.define(_clike.kotlin);
  },
  shader: function shader() {
    return _language.StreamLanguage.define(_clike.shader);
  },
  nesC: function nesC() {
    return _language.StreamLanguage.define(_clike.nesC);
  },
  objectiveC: function objectiveC() {
    return _language.StreamLanguage.define(_clike.objectiveC);
  },
  objectiveCpp: function objectiveCpp() {
    return _language.StreamLanguage.define(_clike.objectiveCpp);
  },
  squirrel: function squirrel() {
    return _language.StreamLanguage.define(_clike.squirrel);
  },
  ceylon: function ceylon() {
    return _language.StreamLanguage.define(_clike.ceylon);
  },
  dart: function dart() {
    return _language.StreamLanguage.define(_clike.dart);
  },
  cmake: function cmake() {
    return _language.StreamLanguage.define(_cmake2.cmake);
  },
  cobol: function cobol() {
    return _language.StreamLanguage.define(_cobol2.cobol);
  },
  commonLisp: function commonLisp() {
    return _language.StreamLanguage.define(_commonlisp.commonLisp);
  },
  crystal: function crystal() {
    return _language.StreamLanguage.define(_crystal2.crystal);
  },
  cypher: function cypher() {
    return _language.StreamLanguage.define(_cypher2.cypher);
  },
  d: function d() {
    return _language.StreamLanguage.define(_d2.d);
  },
  diff: function diff() {
    return _language.StreamLanguage.define(_diff2.diff);
  },
  dtd: function dtd() {
    return _language.StreamLanguage.define(_dtd2.dtd);
  },
  dylan: function dylan() {
    return _language.StreamLanguage.define(_dylan2.dylan);
  },
  ebnf: function ebnf() {
    return _language.StreamLanguage.define(_ebnf2.ebnf);
  },
  ecl: function ecl() {
    return _language.StreamLanguage.define(_ecl2.ecl);
  },
  eiffel: function eiffel() {
    return _language.StreamLanguage.define(_eiffel2.eiffel);
  },
  elm: function elm() {
    return _language.StreamLanguage.define(_elm2.elm);
  },
  factor: function factor() {
    return _language.StreamLanguage.define(_factor2.factor);
  },
  fcl: function fcl() {
    return _language.StreamLanguage.define(_fcl2.fcl);
  },
  forth: function forth() {
    return _language.StreamLanguage.define(_forth2.forth);
  },
  fortran: function fortran() {
    return _language.StreamLanguage.define(_fortran2.fortran);
  },
  gas: function gas() {
    return _language.StreamLanguage.define(_gas2.gas);
  },
  gherkin: function gherkin() {
    return _language.StreamLanguage.define(_gherkin2.gherkin);
  },
  groovy: function groovy() {
    return _language.StreamLanguage.define(_groovy2.groovy);
  },
  haskell: function haskell() {
    return _language.StreamLanguage.define(_haskell2.haskell);
  },
  haxe: function haxe() {
    return _language.StreamLanguage.define(_haxe2.haxe);
  },
  http: function http() {
    return _language.StreamLanguage.define(_http2.http);
  },
  idl: function idl() {
    return _language.StreamLanguage.define(_idl2.idl);
  },
  jinja2: function jinja2() {
    return _language.StreamLanguage.define(_jinja2.jinja2);
  },
  mathematica: function mathematica() {
    return _language.StreamLanguage.define(_mathematica2.mathematica);
  },
  mbox: function mbox() {
    return _language.StreamLanguage.define(_mbox2.mbox);
  },
  mirc: function mirc() {
    return _language.StreamLanguage.define(_mirc2.mirc);
  },
  modelica: function modelica() {
    return _language.StreamLanguage.define(_modelica2.modelica);
  },
  mscgen: function mscgen() {
    return _language.StreamLanguage.define(_mscgen2.mscgen);
  },
  mumps: function mumps() {
    return _language.StreamLanguage.define(_mumps2.mumps);
  },
  nsis: function nsis() {
    return _language.StreamLanguage.define(_nsis2.nsis);
  },
  ntriples: function ntriples() {
    return _language.StreamLanguage.define(_ntriples2.ntriples);
  },
  octave: function octave() {
    return _language.StreamLanguage.define(_octave2.octave);
  },
  oz: function oz() {
    return _language.StreamLanguage.define(_oz2.oz);
  },
  pig: function pig() {
    return _language.StreamLanguage.define(_pig2.pig);
  },
  properties: function properties() {
    return _language.StreamLanguage.define(_properties2.properties);
  },
  protobuf: function protobuf() {
    return _language.StreamLanguage.define(_protobuf2.protobuf);
  },
  puppet: function puppet() {
    return _language.StreamLanguage.define(_puppet2.puppet);
  },
  q: function q() {
    return _language.StreamLanguage.define(_q2.q);
  },
  sas: function sas() {
    return _language.StreamLanguage.define(_sas2.sas);
  },
  sass: function sass() {
    return (0, _langSass.sass)();
  },
  liquid: function liquid() {
    return (0, _langLiquid.liquid)();
  },
  mermaid: function mermaid() {
    return (0, _codemirrorLangMermaid.mermaid)();
  },
  nix: function nix() {
    return (0, _codemirrorLangNix.nix)();
  },
  svelte: function svelte() {
    return (0, _codemirrorLangSvelte.svelte)();
  },
  sieve: function sieve() {
    return _language.StreamLanguage.define(_sieve2.sieve);
  },
  smalltalk: function smalltalk() {
    return _language.StreamLanguage.define(_smalltalk2.smalltalk);
  },
  solr: function solr() {
    return _language.StreamLanguage.define(_solr2.solr);
  },
  sparql: function sparql() {
    return _language.StreamLanguage.define(_sparql2.sparql);
  },
  spreadsheet: function spreadsheet() {
    return _language.StreamLanguage.define(_spreadsheet2.spreadsheet);
  },
  stex: function stex() {
    return _language.StreamLanguage.define(_stex2.stex);
  },
  textile: function textile() {
    return _language.StreamLanguage.define(_textile2.textile);
  },
  tiddlyWiki: function tiddlyWiki() {
    return _language.StreamLanguage.define(_tiddlywiki.tiddlyWiki);
  },
  tiki: function tiki() {
    return _language.StreamLanguage.define(_tiki2.tiki);
  },
  troff: function troff() {
    return _language.StreamLanguage.define(_troff2.troff);
  },
  ttcn: function ttcn() {
    return _language.StreamLanguage.define(_ttcn2.ttcn);
  },
  turtle: function turtle() {
    return _language.StreamLanguage.define(_turtle2.turtle);
  },
  velocity: function velocity() {
    return _language.StreamLanguage.define(_velocity2.velocity);
  },
  verilog: function verilog() {
    return _language.StreamLanguage.define(_verilog2.verilog);
  },
  vhdl: function vhdl() {
    return _language.StreamLanguage.define(_vhdl2.vhdl);
  },
  webIDL: function webIDL() {
    return _language.StreamLanguage.define(_webidl.webIDL);
  },
  xQuery: function xQuery() {
    return _language.StreamLanguage.define(_xquery.xQuery);
  },
  yacas: function yacas() {
    return _language.StreamLanguage.define(_yacas2.yacas);
  },
  z80: function z80() {
    return _language.StreamLanguage.define(_z2.z80);
  },
  wast: _langWast.wast,
  javascript: _langJavascript.javascript,
  jsx: function jsx() {
    return (0, _langJavascript.javascript)({
      jsx: true
    });
  },
  typescript: function typescript() {
    return (0, _langJavascript.javascript)({
      typescript: true
    });
  },
  tsx: function tsx() {
    return (0, _langJavascript.javascript)({
      jsx: true,
      typescript: true
    });
  },
  vue: function vue() {
    return (0, _langVue.vue)();
  },
  angular: function angular() {
    return (0, _langAngular.angular)();
  },
  json: _langJson.json,
  html: _langHtml.html,
  css: _langCss.css,
  python: _langPython.python,
  markdown: function markdown() {
    return (0, _langMarkdown.markdown)({
      base: _langMarkdown.markdownLanguage,
      codeLanguages: _languageData.languages
    });
  },
  xml: _langXml.xml,
  sql: _langSql.sql,
  mysql: function mysql() {
    return (0, _langSql.sql)({
      dialect: _langSql.MySQL
    });
  },
  pgsql: function pgsql() {
    return (0, _langSql.sql)({
      dialect: _langSql.PostgreSQL
    });
  },
  java: _langJava.java,
  rust: _langRust.rust,
  cpp: _langCpp.cpp,
  // clike: () => StreamLanguage.define(clike),
  // clike: () => clike({ }),
  lezer: _langLezer.lezer,
  php: _langPhp.php,
  go: function go() {
    return _language.StreamLanguage.define(_go2.go);
  },
  shell: function shell() {
    return _language.StreamLanguage.define(_shell2.shell);
  },
  lua: function lua() {
    return _language.StreamLanguage.define(_lua2.lua);
  },
  swift: function swift() {
    return _language.StreamLanguage.define(_swift2.swift);
  },
  tcl: function tcl() {
    return _language.StreamLanguage.define(_tcl2.tcl);
  },
  yaml: function yaml() {
    return _language.StreamLanguage.define(_yaml2.yaml);
  },
  vb: function vb() {
    return _language.StreamLanguage.define(_vb2.vb);
  },
  powershell: function powershell() {
    return _language.StreamLanguage.define(_powershell.powerShell);
  },
  brainfuck: function brainfuck() {
    return _language.StreamLanguage.define(_brainfuck2.brainfuck);
  },
  stylus: function stylus() {
    return _language.StreamLanguage.define(_stylus2.stylus);
  },
  erlang: function erlang() {
    return _language.StreamLanguage.define(_erlang2.erlang);
  },
  nginx: function nginx() {
    return _language.StreamLanguage.define(_nginx2.nginx);
  },
  perl: function perl() {
    return _language.StreamLanguage.define(_perl2.perl);
  },
  ruby: function ruby() {
    return _language.StreamLanguage.define(_ruby2.ruby);
  },
  pascal: function pascal() {
    return _language.StreamLanguage.define(_pascal2.pascal);
  },
  livescript: function livescript() {
    return _language.StreamLanguage.define(_livescript.liveScript);
  },
  less: function less() {
    return (0, _langLess.less)();
  },
  scheme: function scheme() {
    return _language.StreamLanguage.define(_scheme2.scheme);
  },
  toml: function toml() {
    return _language.StreamLanguage.define(_toml2.toml);
  },
  vbscript: function vbscript() {
    return _language.StreamLanguage.define(_vbscript.vbScript);
  },
  clojure: function clojure() {
    return (0, _langClojure.clojure)();
  },
  coffeescript: function coffeescript() {
    return _language.StreamLanguage.define(_coffeescript.coffeeScript);
  },
  julia: function julia() {
    return _language.StreamLanguage.define(_julia2.julia);
  },
  dockerfile: function dockerfile() {
    return _language.StreamLanguage.define(_dockerfile.dockerFile);
  },
  r: function r() {
    return _language.StreamLanguage.define(_r2.r);
  }
};

/** Language list */
var langNames = exports.langNames = Object.keys(langs);
function loadLanguage(name) {
  return langs[name] ? langs[name]() : null;
}