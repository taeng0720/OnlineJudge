"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiMetricsMiddleware = void 0;
const common_1 = require("@nestjs/common");
const responseTime = require("response-time");
const urlParser = require("url");
const metric_service_1 = require("../metrics/metric.service");
const opentelemetry_constants_1 = require("../opentelemetry.constants");
let ApiMetricsMiddleware = exports.ApiMetricsMiddleware = class ApiMetricsMiddleware {
    constructor(metricService, options = {}) {
        this.metricService = metricService;
        this.options = options;
        const { defaultAttributes = {}, ignoreUndefinedRoutes = false, } = options?.metrics?.apiMetrics ?? {};
        this.defaultMetricAttributes = defaultAttributes;
        this.ignoreUndefinedRoutes = ignoreUndefinedRoutes;
        this.httpServerRequestCount = this.metricService.getCounter('http.server.request.count', {
            description: 'Total number of HTTP requests',
            unit: 'requests',
        });
        this.httpServerResponseCount = this.metricService.getCounter('http.server.response.count', {
            description: 'Total number of HTTP responses',
            unit: 'responses',
        });
        this.httpServerAbortCount = this.metricService.getCounter('http.server.abort.count', {
            description: 'Total number of data transfers aborted',
            unit: 'requests',
        });
        this.httpServerDuration = this.metricService.getHistogram('http.server.duration', {
            description: 'The duration of the inbound HTTP request',
            unit: 'ms',
        });
        this.httpServerRequestSize = this.metricService.getHistogram('http.server.request.size', {
            description: 'Size of incoming bytes',
            unit: 'By',
        });
        this.httpServerResponseSize = this.metricService.getHistogram('http.server.response.size', {
            description: 'Size of outgoing bytes',
            unit: 'By',
        });
        this.httpServerResponseSuccessCount = this.metricService.getCounter('http.server.response.success.count', {
            description: 'Total number of all successful responses',
            unit: 'responses',
        });
        this.httpServerResponseErrorCount = this.metricService.getCounter('http.server.response.error.count', {
            description: 'Total number of all response errors',
        });
        this.httpClientRequestErrorCount = this.metricService.getCounter('http.client.request.error.count', {
            description: 'Total number of client error requests',
        });
    }
    use(req, res, next) {
        responseTime((req, res, time) => {
            const { route, url, method } = req;
            let path;
            if (route) {
                path = route.path;
            }
            else if (this.ignoreUndefinedRoutes) {
                return;
            }
            else {
                path = urlParser.parse(url).pathname;
            }
            this.httpServerRequestCount.add(1, { method, path });
            const requestLength = parseInt(req.headers['content-length'], 10) || 0;
            const responseLength = parseInt(res.getHeader('Content-Length'), 10) || 0;
            const status = res.statusCode || 500;
            const attributes = {
                method, status, path, ...this.defaultMetricAttributes,
            };
            this.httpServerRequestSize.record(requestLength, attributes);
            this.httpServerResponseSize.record(responseLength, attributes);
            this.httpServerResponseCount.add(1, attributes);
            this.httpServerDuration.record(time, attributes);
            const codeClass = this.getStatusCodeClass(status);
            switch (codeClass) {
                case 'success':
                    this.httpServerResponseSuccessCount.add(1);
                    break;
                case 'redirect':
                    this.httpServerResponseSuccessCount.add(1);
                    break;
                case 'client_error':
                    this.httpClientRequestErrorCount.add(1);
                    break;
                case 'server_error':
                    this.httpServerResponseErrorCount.add(1);
                    break;
            }
            req.on('end', () => {
                if (req.aborted === true) {
                    this.httpServerAbortCount.add(1);
                }
            });
        })(req, res, next);
    }
    getStatusCodeClass(code) {
        if (code < 200)
            return 'info';
        if (code < 300)
            return 'success';
        if (code < 400)
            return 'redirect';
        if (code < 500)
            return 'client_error';
        return 'server_error';
    }
};
exports.ApiMetricsMiddleware = ApiMetricsMiddleware = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_1.Inject)(metric_service_1.MetricService)),
    __param(1, (0, common_1.Inject)(opentelemetry_constants_1.OPENTELEMETRY_MODULE_OPTIONS)),
    __metadata("design:paramtypes", [metric_service_1.MetricService, Object])
], ApiMetricsMiddleware);
