{"version":3,"file":"serializers.js","sourceRoot":"","sources":["../../src/serializers.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,yCAAyC;AAWzC,MAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;KAChE,yBAAmE,CAAC;AAEvE,MAAM,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;KAC/D,wBAAiE,CAAC;AAErE,MAAM,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;KACtE,4BAAyE,CAAC;AAE7E,MAAM,kBAAkB,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;KACrE,2BAAuE,CAAC;AAE3E,MAAM,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;KAClE,0BAAqE,CAAC;AAEzE,MAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;KACjE,yBAAmE,CAAC;AAU1D,QAAA,cAAc,GAGvB;IACF,gBAAgB,EAAE,CAAC,GAA8B,EAAE,EAAE;QACnD,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;IAC3D,CAAC;IACD,mBAAmB,EAAE,CAAC,GAAW,EAAE,EAAE;QACnC,OAAO,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC;CACF,CAAC;AAEW,QAAA,eAAe,GAGxB;IACF,gBAAgB,EAAE,CAAC,GAA+B,EAAE,EAAE;QACpD,OAAO,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;IAC5D,CAAC;IACD,mBAAmB,EAAE,CAAC,GAAW,EAAE,EAAE;QACnC,OAAO,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACvC,CAAC;CACF,CAAC;AAEW,QAAA,iBAAiB,GAG1B;IACF,gBAAgB,EAAE,CAAC,GAAiC,EAAE,EAAE;QACtD,OAAO,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;IAC9D,CAAC;IACD,mBAAmB,EAAE,CAAC,GAAW,EAAE,EAAE;QACnC,OAAO,mBAAmB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACzC,CAAC;CACF,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as root from './generated/root';\nimport {\n  IExportLogsServiceRequest,\n  IExportLogsServiceResponse,\n  IExportMetricsServiceRequest,\n  IExportMetricsServiceResponse,\n  IExportTraceServiceRequest,\n  IExportTraceServiceResponse,\n} from '@opentelemetry/otlp-transformer';\nimport { ExportType } from './internal-types';\n\nconst logsResponseType = root.opentelemetry.proto.collector.logs.v1\n  .ExportLogsServiceResponse as ExportType<IExportLogsServiceResponse>;\n\nconst logsRequestType = root.opentelemetry.proto.collector.logs.v1\n  .ExportLogsServiceRequest as ExportType<IExportLogsServiceRequest>;\n\nconst metricsResponseType = root.opentelemetry.proto.collector.metrics.v1\n  .ExportMetricsServiceResponse as ExportType<IExportMetricsServiceResponse>;\n\nconst metricsRequestType = root.opentelemetry.proto.collector.metrics.v1\n  .ExportMetricsServiceRequest as ExportType<IExportMetricsServiceRequest>;\n\nconst traceResponseType = root.opentelemetry.proto.collector.trace.v1\n  .ExportTraceServiceResponse as ExportType<IExportTraceServiceResponse>;\n\nconst traceRequestType = root.opentelemetry.proto.collector.trace.v1\n  .ExportTraceServiceRequest as ExportType<IExportTraceServiceRequest>;\n\n/**\n * Serializes and deserializes the OTLP request/response to and from {@link Uint8Array}\n */\nexport interface ISerializer<Request, Response> {\n  serializeRequest(request: Request): Uint8Array | undefined;\n  deserializeResponse(data: Uint8Array): Response;\n}\n\nexport const LogsSerializer: ISerializer<\n  IExportLogsServiceRequest,\n  IExportLogsServiceResponse\n> = {\n  serializeRequest: (arg: IExportLogsServiceRequest) => {\n    return Buffer.from(logsRequestType.encode(arg).finish());\n  },\n  deserializeResponse: (arg: Buffer) => {\n    return logsResponseType.decode(arg);\n  },\n};\n\nexport const TraceSerializer: ISerializer<\n  IExportTraceServiceRequest,\n  IExportTraceServiceResponse\n> = {\n  serializeRequest: (arg: IExportTraceServiceRequest) => {\n    return Buffer.from(traceRequestType.encode(arg).finish());\n  },\n  deserializeResponse: (arg: Buffer) => {\n    return traceResponseType.decode(arg);\n  },\n};\n\nexport const MetricsSerializer: ISerializer<\n  IExportMetricsServiceRequest,\n  IExportMetricsServiceResponse\n> = {\n  serializeRequest: (arg: IExportMetricsServiceRequest) => {\n    return Buffer.from(metricsRequestType.encode(arg).finish());\n  },\n  deserializeResponse: (arg: Buffer) => {\n    return metricsResponseType.decode(arg);\n  },\n};\n"]}