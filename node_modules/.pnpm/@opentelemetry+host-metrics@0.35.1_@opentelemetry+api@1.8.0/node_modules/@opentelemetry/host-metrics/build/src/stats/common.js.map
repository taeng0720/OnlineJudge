{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../src/stats/common.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as os from 'os';\n\nimport { CpuUsageData, MemoryData, ProcessCpuUsageData } from '../types';\n\nconst MILLISECOND = 1 / 1e3;\nconst MICROSECOND = 1 / 1e6;\n\n/**\n * We get data as soon as we load the module so the 1st collect\n * of the metric already has valuable data to be sent.\n */\nlet prevOsData: { time: number; cpus: os.CpuInfo[] } = {\n  time: Date.now(),\n  cpus: os.cpus(),\n};\n\n/**\n * For each CPU returned by `os.cpus()` it returns\n * - the CPU times in each state (user, sys, ...) in seconds\n * - the % of time the CPU was in each state since last measurement\n */\nexport function getCpuUsageData(): CpuUsageData[] {\n  const currentTime = Date.now();\n  const timeElapsed = currentTime - prevOsData.time;\n  const currentOsData = { time: currentTime, cpus: os.cpus() };\n\n  const usageData = currentOsData.cpus.map((cpu, cpuNumber) => {\n    const prevTimes = prevOsData.cpus[cpuNumber].times;\n    const currTimes = cpu.times;\n\n    const idle = currTimes.idle * MILLISECOND;\n    const user = currTimes.user * MILLISECOND;\n    const system = currTimes.sys * MILLISECOND;\n    const interrupt = currTimes.irq * MILLISECOND;\n    const nice = currTimes.nice * MILLISECOND;\n\n    const idleP = (currTimes.idle - prevTimes.idle) / timeElapsed;\n    const userP = (currTimes.user - prevTimes.user) / timeElapsed;\n    const systemP = (currTimes.sys - prevTimes.sys) / timeElapsed;\n    const interruptP = (currTimes.irq - prevTimes.irq) / timeElapsed;\n    const niceP = (currTimes.nice - prevTimes.nice) / timeElapsed;\n\n    return {\n      cpuNumber: String(cpuNumber),\n      idle,\n      user,\n      system,\n      interrupt,\n      nice,\n      userP,\n      systemP,\n      idleP,\n      interruptP,\n      niceP,\n    };\n  });\n\n  prevOsData = currentOsData;\n\n  return usageData;\n}\n\n/**\n * We get data as soon as we load the module so the 1st collect\n * of the metric already has valuable data to be sent.\n */\nlet prevProcData: { time: number; usage: NodeJS.CpuUsage } = {\n  time: Date.now(),\n  usage: process.cpuUsage(),\n};\n\n/**\n * Gets the process CPU usage and returns\n * - the time spent in `user` state\n * - the time spent in `system` state\n * - the % of time in `user` state since last measurement\n * - the % of time in `system` state since last measurement\n */\nexport function getProcessCpuUsageData(): ProcessCpuUsageData {\n  const currentTime = Date.now();\n  const currentUsage = process.cpuUsage();\n  const prevUsage = prevProcData.usage;\n  // According to semantic conventions we need to divide by\n  // - time elapsed (in microseconds to match `process.cpuUsage()` units)\n  // - number of CPUs\n  const timeElapsed = (currentTime - prevProcData.time) * 1000;\n  const cpusTimeElapsed = timeElapsed * prevOsData.cpus.length;\n\n  const user = currentUsage.user * MICROSECOND;\n  const system = currentUsage.system * MICROSECOND;\n  const userP = (currentUsage.user - prevUsage.user) / cpusTimeElapsed;\n  const systemP = (currentUsage.system - prevUsage.system) / cpusTimeElapsed;\n\n  prevProcData = { time: currentTime, usage: currentUsage };\n\n  return {\n    user,\n    system,\n    userP,\n    systemP,\n  };\n}\n\n/**\n * Returns memory data as absolute values\n */\nexport function getMemoryData(): MemoryData {\n  const total = os.totalmem();\n  const free = os.freemem();\n\n  const used = total - free;\n\n  const freeP = free / total;\n  const usedP = used / total;\n\n  return {\n    used: used,\n    free: free,\n    usedP: usedP, // this is frac part (0-1)\n    freeP: freeP, // this is frac part (0-1)\n  };\n}\n\n/**\n * Returns process memory RSS\n * The Resident Set Size, is the amount of space occupied in the main memory device (that is a subset of the total allocated memory) for the process,\n * including all C++ and JavaScript objects and code.\n */\nexport function getProcessMemoryData(): number {\n  // `process.memoryUsage.rss` is a faster alternative introduced in v14.18.0.\n  // Prefer it if available.\n  if (process.memoryUsage.rss) {\n    return process.memoryUsage.rss();\n  }\n  return process.memoryUsage().rss;\n}\n"]}