{"version":3,"file":"BaseMetrics.js","sourceRoot":"","sources":["../../src/BaseMetrics.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,0CAA0C;AAG1C,uCAAoC;AAgBpC,MAAM,YAAY,GAAG,6BAA6B,CAAC;AAEnD;;GAEG;AACH,MAAsB,WAAW;IAK/B,YAAY,MAA8B;QAJhC,YAAO,GAAG,GAAG,CAAC,IAAI,CAAC;QAK3B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,IAAI,YAAY,CAAC;QACzC,MAAM,aAAa,GACjB,MAAM,CAAC,aAAa,IAAI,GAAG,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;QACzD,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;YACzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;SACvD;QACD,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,iBAAO,CAAC,CAAC;IAC5D,CAAC;CAWF;AAxBD,kCAwBC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport * as metrics from '@opentelemetry/sdk-metrics';\n\nimport { VERSION } from './version';\n\n/**\n * Metrics Collector Configuration\n */\nexport interface MetricsCollectorConfig {\n  // Meter Provider\n  meterProvider?: metrics.MeterProvider;\n  // Character to be used to join metrics - default is \".\"\n  metricNameSeparator?: string;\n  // Name of component\n  name: string;\n  // metric export endpoint\n  url?: string;\n}\n\nconst DEFAULT_NAME = '@opentelemetry/host-metrics';\n\n/**\n * Base Class for metrics\n */\nexport abstract class BaseMetrics {\n  protected _logger = api.diag;\n  protected _meter: api.Meter;\n  private _name: string;\n\n  constructor(config: MetricsCollectorConfig) {\n    this._name = config.name || DEFAULT_NAME;\n    const meterProvider =\n      config.meterProvider || api.metrics.getMeterProvider();\n    if (!config.meterProvider) {\n      this._logger.warn('No meter provider, using default');\n    }\n    this._meter = meterProvider.getMeter(this._name, VERSION);\n  }\n\n  /**\n   * Creates metrics\n   */\n  protected abstract _createMetrics(): void;\n\n  /**\n   * Starts collecting stats\n   */\n  public abstract start(): void;\n}\n"]}