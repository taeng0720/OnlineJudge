@top Program { expression }

@detectDelim

@precedence {
  negate,
  has_attr,
  concat @right,
  mul @left,
  div @left,
  add @left,
  sub @left,
  not @left,
  update @right,
  lt @left,
  lte @left,
  gt @left,
  gte @left,
  eq @left,
  neq @left,
  and @left,
  or @left,
  impl @right
}

@skip { space | LineComment | BlockComment }

expression { exprFunction }

@external tokens scanString from "./tokens" {
  strContent,
  strDollarBrace,
  strEnd,
  escapeSequence
}

@external tokens scanIndString from "./tokens" {
  indStrContent,
  indStrDollarBrace,
  indStrEnd,
  indEscapeSequence
}

@tokens {
  Identifier { $[a-zA-Z_] $[a-zA-Z0-9_\'\-]* }

  Integer { $[0-9]+ }

  Float { 
    ($[1-9] $[0-9]* '.' $[0-9]* | '0'? '.' $[0-9]+) ($[Ee] $[+\-]? $[0-9]+)?
  }

  Path {
    $[a-zA-Z0-9._\-\+]* ('/' $[a-zA-Z0-9._\-\+]+)+ '/'?
  }

  @precedence { Path, Float, Integer, Identifier, "." }
  @precedence { Path, "-", ".", "+", "++", "/" }

  HPath {
    '~' ('/' $[a-zA-Z0-9\._\-\+]+)+ '/'?
  }

  SPath {
    '<' $[a-zA-Z0-9\._\-\+]+ ('/' $[a-zA-Z0-9\._\-\+]+)* '>'
  }

  URI {
    $[a-zA-Z] $[a-zA-Z0-9\+\-\.]* ':' $[a-zA-Z0-9%\/\?:@\&=\+\$,\-_\.\!\~\*\']+
  }

  @precedence { URI, Identifier }

  LineComment {  "#" ![\n]* }
  BlockComment { "/*" (![\*] | "*" ![/])* "*/"? }

  @precedence { BlockComment, "/" }

  space { $[ \t\n\r]+ }

  "(" ")"
  "{" "}"
  "[" "]"
  "<" ">"

  Ellipses { "..." }
}

exprFunction {
  Function |
  Assert |
  With |
  Let |
  exprIf
}

Function {
  Identifier ":" exprFunction |
  formals ":" exprFunction |
  formals "@" Identifier ":" exprFunction |
  Identifier "@" formals ":" exprFunction
}

formals {
  "{" "}" |
  "{" Formal ("," Formal)* ("," Ellipses)? "}" |
  "{" Ellipses "}"
}
Formal {
  Identifier ("?" expression)?
}

Assert { kw<"assert"> expression ";" exprFunction }
With { kw<"with"> expression ";" exprFunction }
Let { kw<"let"> binds? kw<"in"> exprFunction }

exprIf {
  IfExpr |
  exprOp
}

IfExpr {
  kw<'if'>
  expression
  kw<'then'>
  expression
  kw<'else'>
  expression
}

exprOp {
  BinaryExpr |
  UnaryExpr |
  exprApp
}

UnaryExpr {
  !not '!' exprOp |
  !negate '-' exprOp
}

BinaryExpr {
  exprOp !has_attr "?" AttrPath |
  exprOp !concat "++" exprOp |
  exprOp !mul "*" exprOp |
  exprOp !div "/" exprOp |
  exprOp !add "+" exprOp |
  exprOp !sub "-" exprOp |
  exprOp !update "//" exprOp |
  exprOp !lt "<" exprOp |
  exprOp !lte "<=" exprOp |
  exprOp !gt ">" exprOp |
  exprOp !gte ">=" exprOp |
  exprOp !eq "==" exprOp |
  exprOp !neq "!=" exprOp |
  exprOp !and "&&" exprOp |
  exprOp !or "||" exprOp |
  exprOp !impl "->" exprOp
}

exprApp {
  App |
  exprSelect
}

App {
  exprApp exprSelect
}

exprSelect {
  Select |
  exprSimple
}

Select {
  (exprSimple "." AttrPath) |
  (exprSimple "." AttrPath kw<"or"> exprSelect)
}

exprSimple {
  Identifier |
  kw<"builtins"> |
  Null |
  Integer |
  Float |
  Boolean |
  String |
  IndentedString |
  Path |
  HPath |
  SPath |
  URI |
  Parenthesized { "(" expression ")" } |
  AttrSet |
  LetAttrSet |
  RecAttrSet |
  List
}

Boolean { @specialize<Identifier, "true" | "false"> }

Null { @specialize<Identifier, "null"> }

AttrSet { "{" binds? "}" }
LetAttrSet { kw<"let"> AttrSet }
RecAttrSet { kw<"rec"> AttrSet }

String { '"' stringParts* strEnd }
IndentedString { "''" indStringParts* indStrEnd }

stringParts { strContent | Interpolation<strDollarBrace> | escapeSequence }
indStringParts { indStrContent | Interpolation<indStrDollarBrace> | indEscapeSequence }

binds { (Bind | inherit | inheritFrom)+ }
Bind { AttrPath "=" expression ";" }
inherit { kw<"inherit"> attrsInherited ";" }
inheritFrom { kw<"inherit"> "(" expression ")" attrsInherited ";" }

AttrPath { sep1<".", Identifier | String | Interpolation<"${">> }

attrsInherited {
  (Identifier | String | Interpolation<"${">)+
}

Interpolation<start> { start expression "}" }

List { "[" exprSelect* "]" }

sep1<separator, content> { content (separator content)* }

kw<word> { @specialize[@name={word}]<Identifier, word> }